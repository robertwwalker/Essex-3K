<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Time Series on 3K: Dynamics and Heterogeneity</title>
    <link>/tags/time-series/</link>
    <description>Recent content in Time Series on 3K: Dynamics and Heterogeneity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 24 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/time-series/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Forecasts and Highcharts</title>
      <link>/blog/forecasts-and-highcharts/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/forecasts-and-highcharts/</guid>
      <description>Beautiful forecasting can be quick and easyI will grab the adjusted closing price of Ford stock (F) from January 1, 2018.
Use the forecast package to find an ARIMA model and forecast it for 50 periods.
Use highcharter to plot it inside a framewidget that is appropriate with the markdown.library(tidyquant)library(forecast)library(highcharter)library(widgetframe)A.Stock &amp;lt;- &amp;quot;F&amp;quot; %&amp;gt;% tq_get(., from = &amp;quot;2018-01-01&amp;quot;)A.</description>
    </item>
    
    <item>
      <title>ACF and PACF on Generated Data</title>
      <link>/code/acf-and-pacf-on-generated-data/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/code/acf-and-pacf-on-generated-data/</guid>
      <description>Simulating Data Simulating data under an ARIMA model in R is made rather easy. From the documentation on arima in stats, we obtain that $$ X_t = a1 X{t-1} + a{2} X{t-2} + \ldots + a{p} X{t-p} + b1 \epsilon{t-1} + b[2] \epsilon{t-2} + \ldots + b{q} \epsilon{t-q} $$ by construction. This can be adjusted with the rand.gen argument.
library(ggplot2) library(forecast) my.data &amp;lt;- arima.sim(list(ar=c(0.7,0.2)), n=100) my.data2 &amp;lt;- data.frame(x=seq(1,100), y=my.data) ggplot(my.</description>
    </item>
    
    <item>
      <title>tidyquant</title>
      <link>/blog/some-basic-time-series-and-moving-average-stuff/</link>
      <pubDate>Sat, 11 May 2019 21:13:14 -0500</pubDate>
      
      <guid>/blog/some-basic-time-series-and-moving-average-stuff/</guid>
      <description>Some Basic Time Series with Equities First, let me get some data using tidyquant.
tidyquant tidyquant automates a lot of equity research and calculation using tidy concepts. I will first use it to get the components of the S and P 500 and pick out those with weights over 1.1 percent. In the next step, I download the data and finally calculate daily returns and a cumulative wealth index.</description>
    </item>
    
    <item>
      <title>Animating the Wealth Index of Selected Equities</title>
      <link>/blog/tidyquant-meets-gganimate/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/tidyquant-meets-gganimate/</guid>
      <description>Some Basic Time Series with Equities First, let me get some data using tidyquant.
tidyquant tidyquant automates a lot of equity research and calculation using tidy concepts. I will first use it to get the components of the S and P 500 and pick out those with weights over 1.1 percent. In the next step, I download the data and finally calculate daily returns and a cumulative wealth index.</description>
    </item>
    
  </channel>
</rss>